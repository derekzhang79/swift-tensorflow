/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: tensorflow/core/framework/device_attributes.proto
 *
 */

import Foundation
import SwiftProtobuf


struct Tensorflow_DeviceLocality: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Tensorflow_DeviceLocality"}
  public var protoMessageName: String {return "DeviceLocality"}
  public var protoPackageName: String {return "tensorflow"}
  public var jsonFieldNames: [String: Int] {return [
    "busId": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "bus_id": 1,
  ]}

  ///   Optional bus locality of device.  Default value of 0 means
  ///   no specific locality.  Specific localities are indexed from 1.
  public var busId: Int32 = 0

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &busId)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if busId != 0 {
      try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: busId, protoFieldNumber: 1, protoFieldName: "bus_id", jsonFieldName: "busId", swiftFieldName: "busId")
    }
  }

  public func _protoc_generated_isEqualTo(other: Tensorflow_DeviceLocality) -> Bool {
    if busId != other.busId {return false}
    return true
  }
}

struct Tensorflow_DeviceAttributes: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Tensorflow_DeviceAttributes"}
  public var protoMessageName: String {return "DeviceAttributes"}
  public var protoPackageName: String {return "tensorflow"}
  public var jsonFieldNames: [String: Int] {return [
    "name": 1,
    "deviceType": 2,
    "memoryLimit": 4,
    "locality": 5,
    "incarnation": 6,
    "physicalDeviceDesc": 7,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "name": 1,
    "device_type": 2,
    "memory_limit": 4,
    "locality": 5,
    "incarnation": 6,
    "physical_device_desc": 7,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Tensorflow_DeviceAttributes
    var _name: String = ""
    var _deviceType: String = ""
    var _memoryLimit: Int64 = 0
    var _locality: Tensorflow_DeviceLocality? = nil
    var _incarnation: UInt64 = 0
    var _physicalDeviceDesc: String = ""

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_name)
      case 2: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_deviceType)
      case 4: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_memoryLimit)
      case 5: handled = try setter.decodeSingularMessageField(fieldType: Tensorflow_DeviceLocality.self, value: &_locality)
      case 6: handled = try setter.decodeSingularField(fieldType: ProtobufFixed64.self, value: &_incarnation)
      case 7: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_physicalDeviceDesc)
      default:
        handled = false
      }
      return handled
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if _name != "" {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: _name, protoFieldNumber: 1, protoFieldName: "name", jsonFieldName: "name", swiftFieldName: "name")
      }
      if _deviceType != "" {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: _deviceType, protoFieldNumber: 2, protoFieldName: "device_type", jsonFieldName: "deviceType", swiftFieldName: "deviceType")
      }
      if _memoryLimit != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: _memoryLimit, protoFieldNumber: 4, protoFieldName: "memory_limit", jsonFieldName: "memoryLimit", swiftFieldName: "memoryLimit")
      }
      if let v = _locality {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 5, protoFieldName: "locality", jsonFieldName: "locality", swiftFieldName: "locality")
      }
      if _incarnation != 0 {
        try visitor.visitSingularField(fieldType: ProtobufFixed64.self, value: _incarnation, protoFieldNumber: 6, protoFieldName: "incarnation", jsonFieldName: "incarnation", swiftFieldName: "incarnation")
      }
      if _physicalDeviceDesc != "" {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: _physicalDeviceDesc, protoFieldNumber: 7, protoFieldName: "physical_device_desc", jsonFieldName: "physicalDeviceDesc", swiftFieldName: "physicalDeviceDesc")
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _name != other._name {return false}
      if _deviceType != other._deviceType {return false}
      if _memoryLimit != other._memoryLimit {return false}
      if _locality != other._locality {return false}
      if _incarnation != other._incarnation {return false}
      if _physicalDeviceDesc != other._physicalDeviceDesc {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._name = _name
      clone._deviceType = _deviceType
      clone._memoryLimit = _memoryLimit
      clone._locality = _locality
      clone._incarnation = _incarnation
      clone._physicalDeviceDesc = _physicalDeviceDesc
      return clone
    }
  }

  private var _storage = _StorageClass()

  ///   Fully specified name of the device within a cluster.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  ///   String representation of device_type.
  public var deviceType: String {
    get {return _storage._deviceType}
    set {_uniqueStorage()._deviceType = newValue}
  }

  ///   Memory capacity of device in bytes.
  public var memoryLimit: Int64 {
    get {return _storage._memoryLimit}
    set {_uniqueStorage()._memoryLimit = newValue}
  }

  ///   Platform-specific data about device that may be useful
  ///   for supporting efficient data transfers.
  public var locality: Tensorflow_DeviceLocality {
    get {return _storage._locality ?? Tensorflow_DeviceLocality()}
    set {_uniqueStorage()._locality = newValue}
  }
  public var hasLocality: Bool {
    return _storage._locality != nil
  }
  public mutating func clearLocality() {
    return _storage._locality = nil
  }

  ///   A device is assigned a global unique number each time it is
  ///   initialized. "incarnation" should never be 0.
  public var incarnation: UInt64 {
    get {return _storage._incarnation}
    set {_uniqueStorage()._incarnation = newValue}
  }

  ///   String representation of the physical device that this device maps to.
  public var physicalDeviceDesc: String {
    get {return _storage._physicalDeviceDesc}
    set {_uniqueStorage()._physicalDeviceDesc = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Tensorflow_DeviceAttributes) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}
