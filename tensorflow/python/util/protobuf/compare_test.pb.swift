/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: tensorflow/python/util/protobuf/compare_test.proto
 *
 */

///   Test messages used in compare_test.py.

import Foundation
import SwiftProtobuf


enum CompareTest_Enum: ProtobufEnum {
  public typealias RawValue = Int
  case a // = 0
  case b // = 1
  case c // = 2

  public init() {
    self = .a
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .a
    case 1: self = .b
    case 2: self = .c
    default: return nil
    }
  }

  public init?(name: String) {
    switch name {
    case "a": self = .a
    case "b": self = .b
    case "c": self = .c
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "A": self = .a
    case "B": self = .b
    case "C": self = .c
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "A": self = .a
    case "B": self = .b
    case "C": self = .c
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .a: return 0
      case .b: return 1
      case .c: return 2
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .a: return "\"A\""
      case .b: return "\"B\""
      case .c: return "\"C\""
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .a: return ".a"
      case .b: return ".b"
      case .c: return ".c"
      }
    }
  }

}

struct CompareTest_Small: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "CompareTest_Small"}
  public var protoMessageName: String {return "Small"}
  public var protoPackageName: String {return "compare_test"}
  public var jsonFieldNames: [String: Int] {return [
    "strings": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "strings": 1,
  ]}

  var unknown = ProtobufUnknownStorage()

  public var strings: [String] = []

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRepeatedField(fieldType: ProtobufString.self, value: &strings)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !strings.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufString.self, value: strings, protoFieldNumber: 1, protoFieldName: "strings", jsonFieldName: "strings", swiftFieldName: "strings")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: CompareTest_Small) -> Bool {
    if strings != other.strings {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct CompareTest_Medium: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "CompareTest_Medium"}
  public var protoMessageName: String {return "Medium"}
  public var protoPackageName: String {return "compare_test"}
  public var jsonFieldNames: [String: Int] {return [
    "int32s": 1,
    "smalls": 2,
    "groupa": 3,
    "floats": 6,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "int32s": 1,
    "smalls": 2,
    "groupa": 3,
    "floats": 6,
  ]}

  var unknown = ProtobufUnknownStorage()

  struct GroupA: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "CompareTest_Medium.GroupA"}
    public var protoMessageName: String {return "GroupA"}
    public var protoPackageName: String {return "compare_test"}
    public var jsonFieldNames: [String: Int] {return [
      "groupb": 4,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "groupb": 4,
    ]}

    var unknown = ProtobufUnknownStorage()

    struct GroupB: ProtobufGeneratedMessage {
      public var swiftClassName: String {return "CompareTest_Medium.GroupA.GroupB"}
      public var protoMessageName: String {return "GroupB"}
      public var protoPackageName: String {return "compare_test"}
      public var jsonFieldNames: [String: Int] {return [
        "strings": 5,
      ]}
      public var protoFieldNames: [String: Int] {return [
        "strings": 5,
      ]}

      var unknown = ProtobufUnknownStorage()

      private var _strings: String? = nil
      public var strings: String {
        get {return _strings ?? ""}
        set {_strings = newValue}
      }
      public var hasStrings: Bool {
        return _strings != nil
      }
      public mutating func clearStrings() {
        return _strings = nil
      }

      public init() {}

      public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
        let handled: Bool
        switch protoFieldNumber {
        case 5: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_strings)
        default:
          handled = false
        }
        if handled {
            return true
        } else {
            return try unknown.decodeField(setter: &setter)
        }
      }

      public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: _strings ?? "", protoFieldNumber: 5, protoFieldName: "strings", jsonFieldName: "strings", swiftFieldName: "strings")
        unknown.traverse(visitor: &visitor)
      }

      public func _protoc_generated_isEqualTo(other: CompareTest_Medium.GroupA.GroupB) -> Bool {
        if (strings != other.strings) {return false}
        if unknown != other.unknown {return false}
        return true
      }
    }

    public var groupB: [CompareTest_Medium.GroupA.GroupB] = []

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 4: handled = try setter.decodeRepeatedGroupField(fieldType: CompareTest_Medium.GroupA.GroupB.self, value: &groupB)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if !groupB.isEmpty {
        try visitor.visitRepeatedGroupField(value: groupB, protoFieldNumber: 4, protoFieldName: "groupb", jsonFieldName: "groupb", swiftFieldName: "groupB")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: CompareTest_Medium.GroupA) -> Bool {
      if groupB != other.groupB {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public var int32S: [Int32] = []

  public var smalls: [CompareTest_Small] = []

  public var groupA: [CompareTest_Medium.GroupA] = []

  public var floats: [Float] = []

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRepeatedField(fieldType: ProtobufInt32.self, value: &int32S)
    case 2: handled = try setter.decodeRepeatedMessageField(fieldType: CompareTest_Small.self, value: &smalls)
    case 3: handled = try setter.decodeRepeatedGroupField(fieldType: CompareTest_Medium.GroupA.self, value: &groupA)
    case 6: handled = try setter.decodeRepeatedField(fieldType: ProtobufFloat.self, value: &floats)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !int32S.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufInt32.self, value: int32S, protoFieldNumber: 1, protoFieldName: "int32s", jsonFieldName: "int32s", swiftFieldName: "int32S")
    }
    if !smalls.isEmpty {
      try visitor.visitRepeatedMessageField(value: smalls, protoFieldNumber: 2, protoFieldName: "smalls", jsonFieldName: "smalls", swiftFieldName: "smalls")
    }
    if !groupA.isEmpty {
      try visitor.visitRepeatedGroupField(value: groupA, protoFieldNumber: 3, protoFieldName: "groupa", jsonFieldName: "groupa", swiftFieldName: "groupA")
    }
    if !floats.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufFloat.self, value: floats, protoFieldNumber: 6, protoFieldName: "floats", jsonFieldName: "floats", swiftFieldName: "floats")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: CompareTest_Medium) -> Bool {
    if int32S != other.int32S {return false}
    if smalls != other.smalls {return false}
    if groupA != other.groupA {return false}
    if floats != other.floats {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct CompareTest_Large: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "CompareTest_Large"}
  public var protoMessageName: String {return "Large"}
  public var protoPackageName: String {return "compare_test"}
  public var jsonFieldNames: [String: Int] {return [
    "string": 1,
    "int64": 2,
    "float": 3,
    "bool": 4,
    "enum": 5,
    "int64s": 6,
    "medium": 7,
    "small": 8,
    "double": 9,
    "withMap": 10,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "string_": 1,
    "int64_": 2,
    "float_": 3,
    "bool_": 4,
    "enum_": 5,
    "int64s": 6,
    "medium": 7,
    "small": 8,
    "double_": 9,
    "with_map": 10,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = CompareTest_Large
    var unknown = ProtobufUnknownStorage()
    var _string_: String? = nil
    var _int64_: Int64? = nil
    var _float_: Float? = nil
    var _bool_: Bool? = nil
    var _enum_: CompareTest_Enum? = nil
    var _int64S: [Int64] = []
    var _medium: CompareTest_Medium? = nil
    var _small: CompareTest_Small? = nil
    var _double_: Double? = nil
    var _withMap: CompareTest_WithMap? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_string_)
      case 2: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_int64_)
      case 3: handled = try setter.decodeSingularField(fieldType: ProtobufFloat.self, value: &_float_)
      case 4: handled = try setter.decodeSingularField(fieldType: ProtobufBool.self, value: &_bool_)
      case 5: handled = try setter.decodeSingularField(fieldType: CompareTest_Enum.self, value: &_enum_)
      case 6: handled = try setter.decodeRepeatedField(fieldType: ProtobufInt64.self, value: &_int64S)
      case 7: handled = try setter.decodeSingularMessageField(fieldType: CompareTest_Medium.self, value: &_medium)
      case 8: handled = try setter.decodeSingularMessageField(fieldType: CompareTest_Small.self, value: &_small)
      case 9: handled = try setter.decodeSingularField(fieldType: ProtobufDouble.self, value: &_double_)
      case 10: handled = try setter.decodeSingularMessageField(fieldType: CompareTest_WithMap.self, value: &_withMap)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _string_ {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 1, protoFieldName: "string_", jsonFieldName: "string", swiftFieldName: "string_")
      }
      if let v = _int64_ {
        try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: v, protoFieldNumber: 2, protoFieldName: "int64_", jsonFieldName: "int64", swiftFieldName: "int64_")
      }
      if let v = _float_ {
        try visitor.visitSingularField(fieldType: ProtobufFloat.self, value: v, protoFieldNumber: 3, protoFieldName: "float_", jsonFieldName: "float", swiftFieldName: "float_")
      }
      if let v = _bool_ {
        try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 4, protoFieldName: "bool_", jsonFieldName: "bool", swiftFieldName: "bool_")
      }
      if let v = _enum_ {
        try visitor.visitSingularField(fieldType: CompareTest_Enum.self, value: v, protoFieldNumber: 5, protoFieldName: "enum_", jsonFieldName: "enum", swiftFieldName: "enum_")
      }
      if !_int64S.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufInt64.self, value: _int64S, protoFieldNumber: 6, protoFieldName: "int64s", jsonFieldName: "int64s", swiftFieldName: "int64S")
      }
      if let v = _medium {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 7, protoFieldName: "medium", jsonFieldName: "medium", swiftFieldName: "medium")
      }
      if let v = _small {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 8, protoFieldName: "small", jsonFieldName: "small", swiftFieldName: "small")
      }
      if let v = _double_ {
        try visitor.visitSingularField(fieldType: ProtobufDouble.self, value: v, protoFieldNumber: 9, protoFieldName: "double_", jsonFieldName: "double", swiftFieldName: "double_")
      }
      if let v = _withMap {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 10, protoFieldName: "with_map", jsonFieldName: "withMap", swiftFieldName: "withMap")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if (_string_ != other._string_) {return false}
      if (_int64_ != other._int64_) {return false}
      if (_float_ != other._float_) {return false}
      if (_bool_ != other._bool_) {return false}
      if (_enum_ != other._enum_) {return false}
      if _int64S != other._int64S {return false}
      if ((_medium != nil || other._medium != nil) && (_medium == nil || other._medium == nil || _medium! != other._medium!)) {return false}
      if ((_small != nil || other._small != nil) && (_small == nil || other._small == nil || _small! != other._small!)) {return false}
      if (_double_ != other._double_) {return false}
      if ((_withMap != nil || other._withMap != nil) && (_withMap == nil || other._withMap == nil || _withMap! != other._withMap!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._string_ = _string_
      clone._int64_ = _int64_
      clone._float_ = _float_
      clone._bool_ = _bool_
      clone._enum_ = _enum_
      clone._int64S = _int64S
      clone._medium = _medium
      clone._small = _small
      clone._double_ = _double_
      clone._withMap = _withMap
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var string_: String {
    get {return _storage._string_ ?? ""}
    set {_uniqueStorage()._string_ = newValue}
  }
  public var hasString_: Bool {
    return _storage._string_ != nil
  }
  public mutating func clearString_() {
    return _storage._string_ = nil
  }

  public var int64_: Int64 {
    get {return _storage._int64_ ?? 0}
    set {_uniqueStorage()._int64_ = newValue}
  }
  public var hasInt64_: Bool {
    return _storage._int64_ != nil
  }
  public mutating func clearInt64_() {
    return _storage._int64_ = nil
  }

  public var float_: Float {
    get {return _storage._float_ ?? 0}
    set {_uniqueStorage()._float_ = newValue}
  }
  public var hasFloat_: Bool {
    return _storage._float_ != nil
  }
  public mutating func clearFloat_() {
    return _storage._float_ = nil
  }

  public var bool_: Bool {
    get {return _storage._bool_ ?? false}
    set {_uniqueStorage()._bool_ = newValue}
  }
  public var hasBool_: Bool {
    return _storage._bool_ != nil
  }
  public mutating func clearBool_() {
    return _storage._bool_ = nil
  }

  public var enum_: CompareTest_Enum {
    get {return _storage._enum_ ?? CompareTest_Enum.a}
    set {_uniqueStorage()._enum_ = newValue}
  }
  public var hasEnum_: Bool {
    return _storage._enum_ != nil
  }
  public mutating func clearEnum_() {
    return _storage._enum_ = nil
  }

  public var int64S: [Int64] {
    get {return _storage._int64S}
    set {_uniqueStorage()._int64S = newValue}
  }

  public var medium: CompareTest_Medium {
    get {return _storage._medium ?? CompareTest_Medium()}
    set {_uniqueStorage()._medium = newValue}
  }
  public var hasMedium: Bool {
    return _storage._medium != nil
  }
  public mutating func clearMedium() {
    return _storage._medium = nil
  }

  public var small: CompareTest_Small {
    get {return _storage._small ?? CompareTest_Small()}
    set {_uniqueStorage()._small = newValue}
  }
  public var hasSmall: Bool {
    return _storage._small != nil
  }
  public mutating func clearSmall() {
    return _storage._small = nil
  }

  public var double_: Double {
    get {return _storage._double_ ?? 0}
    set {_uniqueStorage()._double_ = newValue}
  }
  public var hasDouble_: Bool {
    return _storage._double_ != nil
  }
  public mutating func clearDouble_() {
    return _storage._double_ = nil
  }

  public var withMap: CompareTest_WithMap {
    get {return _storage._withMap ?? CompareTest_WithMap()}
    set {_uniqueStorage()._withMap = newValue}
  }
  public var hasWithMap: Bool {
    return _storage._withMap != nil
  }
  public mutating func clearWithMap() {
    return _storage._withMap = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: CompareTest_Large) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

struct CompareTest_Labeled: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "CompareTest_Labeled"}
  public var protoMessageName: String {return "Labeled"}
  public var protoPackageName: String {return "compare_test"}
  public var jsonFieldNames: [String: Int] {return [
    "required": 1,
    "optional": 2,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "required": 1,
    "optional": 2,
  ]}

  var unknown = ProtobufUnknownStorage()

  private var _required: Int32? = nil
  public var required: Int32 {
    get {return _required ?? 0}
    set {_required = newValue}
  }
  public var hasRequired: Bool {
    return _required != nil
  }
  public mutating func clearRequired() {
    return _required = nil
  }

  private var _optional: Int32? = nil
  public var optional: Int32 {
    get {return _optional ?? 0}
    set {_optional = newValue}
  }
  public var hasOptional: Bool {
    return _optional != nil
  }
  public mutating func clearOptional() {
    return _optional = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_required)
    case 2: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_optional)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _required ?? 0, protoFieldNumber: 1, protoFieldName: "required", jsonFieldName: "required", swiftFieldName: "required")
    if let v = _optional {
      try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 2, protoFieldName: "optional", jsonFieldName: "optional", swiftFieldName: "optional")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: CompareTest_Labeled) -> Bool {
    if (required != other.required) {return false}
    if (optional != other.optional) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct CompareTest_WithMap: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "CompareTest_WithMap"}
  public var protoMessageName: String {return "WithMap"}
  public var protoPackageName: String {return "compare_test"}
  public var jsonFieldNames: [String: Int] {return [
    "valueMessage": 1,
    "valueString": 2,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "value_message": 1,
    "value_string": 2,
  ]}

  var unknown = ProtobufUnknownStorage()

  public var valueMessage: Dictionary<Int32,CompareTest_Small> = [:]

  public var valueString: Dictionary<String,String> = [:]

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,CompareTest_Small>.self, value: &valueMessage)
    case 2: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufString,ProtobufString>.self, value: &valueString)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !valueMessage.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,CompareTest_Small>.self, value: valueMessage, protoFieldNumber: 1, protoFieldName: "value_message", jsonFieldName: "valueMessage", swiftFieldName: "valueMessage")
    }
    if !valueString.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufString,ProtobufString>.self, value: valueString, protoFieldNumber: 2, protoFieldName: "value_string", jsonFieldName: "valueString", swiftFieldName: "valueString")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: CompareTest_WithMap) -> Bool {
    if valueMessage != other.valueMessage {return false}
    if valueString != other.valueString {return false}
    if unknown != other.unknown {return false}
    return true
  }
}
