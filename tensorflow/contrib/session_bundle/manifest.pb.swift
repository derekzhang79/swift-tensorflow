/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: tensorflow/contrib/session_bundle/manifest.proto
 *
 */

import Foundation
import SwiftProtobuf


///   Signatures of model export.
struct Tensorflow_Serving_Signatures: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Tensorflow_Serving_Signatures"}
  public var protoMessageName: String {return "Signatures"}
  public var protoPackageName: String {return "tensorflow.serving"}
  public var jsonFieldNames: [String: Int] {return [
    "defaultSignature": 1,
    "namedSignatures": 2,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "default_signature": 1,
    "named_signatures": 2,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Tensorflow_Serving_Signatures
    var _defaultSignature: Tensorflow_Serving_Signature? = nil
    var _namedSignatures: Dictionary<String,Tensorflow_Serving_Signature> = [:]

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularMessageField(fieldType: Tensorflow_Serving_Signature.self, value: &_defaultSignature)
      case 2: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufString,Tensorflow_Serving_Signature>.self, value: &_namedSignatures)
      default:
        handled = false
      }
      return handled
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _defaultSignature {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "default_signature", jsonFieldName: "defaultSignature", swiftFieldName: "defaultSignature")
      }
      if !_namedSignatures.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufString,Tensorflow_Serving_Signature>.self, value: _namedSignatures, protoFieldNumber: 2, protoFieldName: "named_signatures", jsonFieldName: "namedSignatures", swiftFieldName: "namedSignatures")
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _defaultSignature != other._defaultSignature {return false}
      if _namedSignatures != other._namedSignatures {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._defaultSignature = _defaultSignature
      clone._namedSignatures = _namedSignatures
      return clone
    }
  }

  private var _storage = _StorageClass()

  ///   Default signature of the graph.
  ///   WARNING(break-tutorial-inline-code): The following code snippet is
  ///   in-lined in tutorials, please update tutorial documents accordingly
  ///   whenever code changes.
  public var defaultSignature: Tensorflow_Serving_Signature {
    get {return _storage._defaultSignature ?? Tensorflow_Serving_Signature()}
    set {_uniqueStorage()._defaultSignature = newValue}
  }
  public var hasDefaultSignature: Bool {
    return _storage._defaultSignature != nil
  }
  public mutating func clearDefaultSignature() {
    return _storage._defaultSignature = nil
  }

  ///   Named signatures of the graph.
  public var namedSignatures: Dictionary<String,Tensorflow_Serving_Signature> {
    get {return _storage._namedSignatures}
    set {_uniqueStorage()._namedSignatures = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Tensorflow_Serving_Signatures) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   A binding to a tensor including the name and, possibly in the future, type
///   or other metadata. For example, this may specify whether a tensor supports
///   batch vs single inference.
struct Tensorflow_Serving_TensorBinding: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Tensorflow_Serving_TensorBinding"}
  public var protoMessageName: String {return "TensorBinding"}
  public var protoPackageName: String {return "tensorflow.serving"}
  public var jsonFieldNames: [String: Int] {return [
    "tensorName": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "tensor_name": 1,
  ]}

  ///   The name of the tensor to bind to.
  public var tensorName: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &tensorName)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if tensorName != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: tensorName, protoFieldNumber: 1, protoFieldName: "tensor_name", jsonFieldName: "tensorName", swiftFieldName: "tensorName")
    }
  }

  public func _protoc_generated_isEqualTo(other: Tensorflow_Serving_TensorBinding) -> Bool {
    if tensorName != other.tensorName {return false}
    return true
  }
}

///   An asset file or set of sharded files with the same name that will be bound
///   to a tensor at init / session_bundle load time.
struct Tensorflow_Serving_AssetFile: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Tensorflow_Serving_AssetFile"}
  public var protoMessageName: String {return "AssetFile"}
  public var protoPackageName: String {return "tensorflow.serving"}
  public var jsonFieldNames: [String: Int] {return [
    "tensorBinding": 1,
    "filename": 2,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "tensor_binding": 1,
    "filename": 2,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Tensorflow_Serving_AssetFile
    var _tensorBinding: Tensorflow_Serving_TensorBinding? = nil
    var _filename: String = ""

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularMessageField(fieldType: Tensorflow_Serving_TensorBinding.self, value: &_tensorBinding)
      case 2: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_filename)
      default:
        handled = false
      }
      return handled
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _tensorBinding {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "tensor_binding", jsonFieldName: "tensorBinding", swiftFieldName: "tensorBinding")
      }
      if _filename != "" {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: _filename, protoFieldNumber: 2, protoFieldName: "filename", jsonFieldName: "filename", swiftFieldName: "filename")
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _tensorBinding != other._tensorBinding {return false}
      if _filename != other._filename {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._tensorBinding = _tensorBinding
      clone._filename = _filename
      return clone
    }
  }

  private var _storage = _StorageClass()

  ///   The tensor to bind the asset filename to.
  public var tensorBinding: Tensorflow_Serving_TensorBinding {
    get {return _storage._tensorBinding ?? Tensorflow_Serving_TensorBinding()}
    set {_uniqueStorage()._tensorBinding = newValue}
  }
  public var hasTensorBinding: Bool {
    return _storage._tensorBinding != nil
  }
  public mutating func clearTensorBinding() {
    return _storage._tensorBinding = nil
  }

  ///   The filename within the assets directory. Note: does not include the base
  ///   path or asset directory prefix. Base paths can and will change when models
  ///   are deployed for serving.
  public var filename: String {
    get {return _storage._filename}
    set {_uniqueStorage()._filename = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Tensorflow_Serving_AssetFile) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   A Signature specifies the inputs and outputs of commonly used graphs.
struct Tensorflow_Serving_Signature: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Tensorflow_Serving_Signature"}
  public var protoMessageName: String {return "Signature"}
  public var protoPackageName: String {return "tensorflow.serving"}
  public var jsonFieldNames: [String: Int] {return [
    "regressionSignature": 1,
    "classificationSignature": 2,
    "genericSignature": 3,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "regression_signature": 1,
    "classification_signature": 2,
    "generic_signature": 3,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Tensorflow_Serving_Signature
    var _type = Tensorflow_Serving_Signature.OneOf_Type()

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1, 2, 3:
        handled = try _type.decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
      default:
        handled = false
      }
      return handled
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      try _type.traverse(visitor: &visitor, start: 1, end: 4)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _type != other._type {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._type = _type
      return clone
    }
  }

  private var _storage = _StorageClass()

  enum OneOf_Type: ExpressibleByNilLiteral, ProtobufOneofEnum {
    case regressionSignature(Tensorflow_Serving_RegressionSignature)
    case classificationSignature(Tensorflow_Serving_ClassificationSignature)
    case genericSignature(Tensorflow_Serving_GenericSignature)
    case None

    public init(nilLiteral: ()) {
      self = .None
    }

    public init() {
      self = .None
    }

    public mutating func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      if self != .None && setter.rejectConflictingOneof {
        throw ProtobufDecodingError.duplicatedOneOf
      }
      let handled: Bool
      switch protoFieldNumber {
      case 1:
        var value: Tensorflow_Serving_RegressionSignature?
        handled = try setter.decodeSingularMessageField(fieldType: Tensorflow_Serving_RegressionSignature.self, value: &value)
        if let value = value, handled {
          self = .regressionSignature(value)
        }
      case 2:
        var value: Tensorflow_Serving_ClassificationSignature?
        handled = try setter.decodeSingularMessageField(fieldType: Tensorflow_Serving_ClassificationSignature.self, value: &value)
        if let value = value, handled {
          self = .classificationSignature(value)
        }
      case 3:
        var value: Tensorflow_Serving_GenericSignature?
        handled = try setter.decodeSingularMessageField(fieldType: Tensorflow_Serving_GenericSignature.self, value: &value)
        if let value = value, handled {
          self = .genericSignature(value)
        }
      default:
        handled = false
        self = .None
      }
      return handled
    }

    public func traverse(visitor: inout ProtobufVisitor, start: Int, end: Int) throws {
      switch self {
      case .regressionSignature(let v):
        if start <= 1 && 1 < end {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "regression_signature", jsonFieldName: "regressionSignature", swiftFieldName: "regressionSignature")
        }
      case .classificationSignature(let v):
        if start <= 2 && 2 < end {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 2, protoFieldName: "classification_signature", jsonFieldName: "classificationSignature", swiftFieldName: "classificationSignature")
        }
      case .genericSignature(let v):
        if start <= 3 && 3 < end {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 3, protoFieldName: "generic_signature", jsonFieldName: "genericSignature", swiftFieldName: "genericSignature")
        }
      case .None:
        break
      }
    }
  }

  public var regressionSignature: Tensorflow_Serving_RegressionSignature {
    get {
      if case .regressionSignature(let v) = _storage._type {
        return v
      }
      return Tensorflow_Serving_RegressionSignature()
    }
    set {
      _uniqueStorage()._type = .regressionSignature(newValue)
    }
  }

  public var classificationSignature: Tensorflow_Serving_ClassificationSignature {
    get {
      if case .classificationSignature(let v) = _storage._type {
        return v
      }
      return Tensorflow_Serving_ClassificationSignature()
    }
    set {
      _uniqueStorage()._type = .classificationSignature(newValue)
    }
  }

  public var genericSignature: Tensorflow_Serving_GenericSignature {
    get {
      if case .genericSignature(let v) = _storage._type {
        return v
      }
      return Tensorflow_Serving_GenericSignature()
    }
    set {
      _uniqueStorage()._type = .genericSignature(newValue)
    }
  }

  public var type: OneOf_Type {
    get {return _storage._type}
    set {
      _uniqueStorage()._type = newValue
    }
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Tensorflow_Serving_Signature) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   RegressionSignature specifies a graph that takes an input and returns an
///   output.
struct Tensorflow_Serving_RegressionSignature: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Tensorflow_Serving_RegressionSignature"}
  public var protoMessageName: String {return "RegressionSignature"}
  public var protoPackageName: String {return "tensorflow.serving"}
  public var jsonFieldNames: [String: Int] {return [
    "input": 1,
    "output": 2,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "input": 1,
    "output": 2,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Tensorflow_Serving_RegressionSignature
    var _input: Tensorflow_Serving_TensorBinding? = nil
    var _output: Tensorflow_Serving_TensorBinding? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularMessageField(fieldType: Tensorflow_Serving_TensorBinding.self, value: &_input)
      case 2: handled = try setter.decodeSingularMessageField(fieldType: Tensorflow_Serving_TensorBinding.self, value: &_output)
      default:
        handled = false
      }
      return handled
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _input {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "input", jsonFieldName: "input", swiftFieldName: "input")
      }
      if let v = _output {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 2, protoFieldName: "output", jsonFieldName: "output", swiftFieldName: "output")
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _input != other._input {return false}
      if _output != other._output {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._input = _input
      clone._output = _output
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var input: Tensorflow_Serving_TensorBinding {
    get {return _storage._input ?? Tensorflow_Serving_TensorBinding()}
    set {_uniqueStorage()._input = newValue}
  }
  public var hasInput: Bool {
    return _storage._input != nil
  }
  public mutating func clearInput() {
    return _storage._input = nil
  }

  public var output: Tensorflow_Serving_TensorBinding {
    get {return _storage._output ?? Tensorflow_Serving_TensorBinding()}
    set {_uniqueStorage()._output = newValue}
  }
  public var hasOutput: Bool {
    return _storage._output != nil
  }
  public mutating func clearOutput() {
    return _storage._output = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Tensorflow_Serving_RegressionSignature) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   ClassificationSignature specifies a graph that takes an input and returns
///   classes and their scores.
///   WARNING(break-tutorial-inline-code): The following code snippet is
///   in-lined in tutorials, please update tutorial documents accordingly
///   whenever code changes.
struct Tensorflow_Serving_ClassificationSignature: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Tensorflow_Serving_ClassificationSignature"}
  public var protoMessageName: String {return "ClassificationSignature"}
  public var protoPackageName: String {return "tensorflow.serving"}
  public var jsonFieldNames: [String: Int] {return [
    "input": 1,
    "classes": 2,
    "scores": 3,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "input": 1,
    "classes": 2,
    "scores": 3,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Tensorflow_Serving_ClassificationSignature
    var _input: Tensorflow_Serving_TensorBinding? = nil
    var _classes: Tensorflow_Serving_TensorBinding? = nil
    var _scores: Tensorflow_Serving_TensorBinding? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularMessageField(fieldType: Tensorflow_Serving_TensorBinding.self, value: &_input)
      case 2: handled = try setter.decodeSingularMessageField(fieldType: Tensorflow_Serving_TensorBinding.self, value: &_classes)
      case 3: handled = try setter.decodeSingularMessageField(fieldType: Tensorflow_Serving_TensorBinding.self, value: &_scores)
      default:
        handled = false
      }
      return handled
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _input {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "input", jsonFieldName: "input", swiftFieldName: "input")
      }
      if let v = _classes {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 2, protoFieldName: "classes", jsonFieldName: "classes", swiftFieldName: "classes")
      }
      if let v = _scores {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 3, protoFieldName: "scores", jsonFieldName: "scores", swiftFieldName: "scores")
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _input != other._input {return false}
      if _classes != other._classes {return false}
      if _scores != other._scores {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._input = _input
      clone._classes = _classes
      clone._scores = _scores
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var input: Tensorflow_Serving_TensorBinding {
    get {return _storage._input ?? Tensorflow_Serving_TensorBinding()}
    set {_uniqueStorage()._input = newValue}
  }
  public var hasInput: Bool {
    return _storage._input != nil
  }
  public mutating func clearInput() {
    return _storage._input = nil
  }

  public var classes: Tensorflow_Serving_TensorBinding {
    get {return _storage._classes ?? Tensorflow_Serving_TensorBinding()}
    set {_uniqueStorage()._classes = newValue}
  }
  public var hasClasses: Bool {
    return _storage._classes != nil
  }
  public mutating func clearClasses() {
    return _storage._classes = nil
  }

  public var scores: Tensorflow_Serving_TensorBinding {
    get {return _storage._scores ?? Tensorflow_Serving_TensorBinding()}
    set {_uniqueStorage()._scores = newValue}
  }
  public var hasScores: Bool {
    return _storage._scores != nil
  }
  public mutating func clearScores() {
    return _storage._scores = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Tensorflow_Serving_ClassificationSignature) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   GenericSignature specifies a map from logical name to Tensor name.
///   Typical application of GenericSignature is to use a single GenericSignature
///   that includes all of the Tensor nodes and target names that may be useful at
///   serving, analysis or debugging time. The recommended name for this signature
///   in the ModelManifest is "generic_bindings".
struct Tensorflow_Serving_GenericSignature: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Tensorflow_Serving_GenericSignature"}
  public var protoMessageName: String {return "GenericSignature"}
  public var protoPackageName: String {return "tensorflow.serving"}
  public var jsonFieldNames: [String: Int] {return [
    "map": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "map": 1,
  ]}

  public var map: Dictionary<String,Tensorflow_Serving_TensorBinding> = [:]

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufString,Tensorflow_Serving_TensorBinding>.self, value: &map)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !map.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufString,Tensorflow_Serving_TensorBinding>.self, value: map, protoFieldNumber: 1, protoFieldName: "map", jsonFieldName: "map", swiftFieldName: "map")
    }
  }

  public func _protoc_generated_isEqualTo(other: Tensorflow_Serving_GenericSignature) -> Bool {
    if map != other.map {return false}
    return true
  }
}

func ==(lhs: Tensorflow_Serving_Signature.OneOf_Type, rhs: Tensorflow_Serving_Signature.OneOf_Type) -> Bool {
  switch (lhs, rhs) {
  case (.regressionSignature(let l), .regressionSignature(let r)): return l == r
  case (.classificationSignature(let l), .classificationSignature(let r)): return l == r
  case (.genericSignature(let l), .genericSignature(let r)): return l == r
  case (.None, .None): return true
  default: return false
  }
}
