/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: tensorflow/tools/tfprof/tfprof_options.proto
 *
 */

import Foundation
import SwiftProtobuf


///   Refers to tfprof_options.h/cc for documentation.
///   Only used to pass tfprof options from Python to C++.
struct Tensorflow_Tfprof_OptionsProto: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Tensorflow_Tfprof_OptionsProto"}
  public var protoMessageName: String {return "OptionsProto"}
  public var protoPackageName: String {return "tensorflow.tfprof"}
  public var jsonFieldNames: [String: Int] {return [
    "maxDepth": 1,
    "minBytes": 2,
    "minMicros": 3,
    "minParams": 4,
    "minFloatOps": 5,
    "deviceRegexes": 6,
    "orderBy": 7,
    "accountTypeRegexes": 8,
    "startNameRegexes": 9,
    "trimNameRegexes": 10,
    "showNameRegexes": 11,
    "hideNameRegexes": 12,
    "accountDisplayedOpOnly": 13,
    "select": 14,
    "viz": 15,
    "dumpToFile": 16,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "max_depth": 1,
    "min_bytes": 2,
    "min_micros": 3,
    "min_params": 4,
    "min_float_ops": 5,
    "device_regexes": 6,
    "order_by": 7,
    "account_type_regexes": 8,
    "start_name_regexes": 9,
    "trim_name_regexes": 10,
    "show_name_regexes": 11,
    "hide_name_regexes": 12,
    "account_displayed_op_only": 13,
    "select": 14,
    "viz": 15,
    "dump_to_file": 16,
  ]}

  var unknown = ProtobufUnknownStorage()

  private var _maxDepth: Int64? = nil
  public var maxDepth: Int64 {
    get {return _maxDepth ?? 0}
    set {_maxDepth = newValue}
  }
  public var hasMaxDepth: Bool {
    return _maxDepth != nil
  }
  public mutating func clearMaxDepth() {
    return _maxDepth = nil
  }

  private var _minBytes: Int64? = nil
  public var minBytes: Int64 {
    get {return _minBytes ?? 0}
    set {_minBytes = newValue}
  }
  public var hasMinBytes: Bool {
    return _minBytes != nil
  }
  public mutating func clearMinBytes() {
    return _minBytes = nil
  }

  private var _minMicros: Int64? = nil
  public var minMicros: Int64 {
    get {return _minMicros ?? 0}
    set {_minMicros = newValue}
  }
  public var hasMinMicros: Bool {
    return _minMicros != nil
  }
  public mutating func clearMinMicros() {
    return _minMicros = nil
  }

  private var _minParams: Int64? = nil
  public var minParams: Int64 {
    get {return _minParams ?? 0}
    set {_minParams = newValue}
  }
  public var hasMinParams: Bool {
    return _minParams != nil
  }
  public mutating func clearMinParams() {
    return _minParams = nil
  }

  private var _minFloatOps: Int64? = nil
  public var minFloatOps: Int64 {
    get {return _minFloatOps ?? 0}
    set {_minFloatOps = newValue}
  }
  public var hasMinFloatOps: Bool {
    return _minFloatOps != nil
  }
  public mutating func clearMinFloatOps() {
    return _minFloatOps = nil
  }

  public var deviceRegexes: [String] = []

  private var _orderBy: String? = nil
  public var orderBy: String {
    get {return _orderBy ?? ""}
    set {_orderBy = newValue}
  }
  public var hasOrderBy: Bool {
    return _orderBy != nil
  }
  public mutating func clearOrderBy() {
    return _orderBy = nil
  }

  public var accountTypeRegexes: [String] = []

  public var startNameRegexes: [String] = []

  public var trimNameRegexes: [String] = []

  public var showNameRegexes: [String] = []

  public var hideNameRegexes: [String] = []

  private var _accountDisplayedOpOnly: Bool? = nil
  public var accountDisplayedOpOnly: Bool {
    get {return _accountDisplayedOpOnly ?? false}
    set {_accountDisplayedOpOnly = newValue}
  }
  public var hasAccountDisplayedOpOnly: Bool {
    return _accountDisplayedOpOnly != nil
  }
  public mutating func clearAccountDisplayedOpOnly() {
    return _accountDisplayedOpOnly = nil
  }

  public var select: [String] = []

  private var _viz: Bool? = nil
  public var viz: Bool {
    get {return _viz ?? false}
    set {_viz = newValue}
  }
  public var hasViz: Bool {
    return _viz != nil
  }
  public mutating func clearViz() {
    return _viz = nil
  }

  private var _dumpToFile: String? = nil
  public var dumpToFile: String {
    get {return _dumpToFile ?? ""}
    set {_dumpToFile = newValue}
  }
  public var hasDumpToFile: Bool {
    return _dumpToFile != nil
  }
  public mutating func clearDumpToFile() {
    return _dumpToFile = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_maxDepth)
    case 2: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_minBytes)
    case 3: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_minMicros)
    case 4: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_minParams)
    case 5: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_minFloatOps)
    case 6: handled = try setter.decodeRepeatedField(fieldType: ProtobufString.self, value: &deviceRegexes)
    case 7: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_orderBy)
    case 8: handled = try setter.decodeRepeatedField(fieldType: ProtobufString.self, value: &accountTypeRegexes)
    case 9: handled = try setter.decodeRepeatedField(fieldType: ProtobufString.self, value: &startNameRegexes)
    case 10: handled = try setter.decodeRepeatedField(fieldType: ProtobufString.self, value: &trimNameRegexes)
    case 11: handled = try setter.decodeRepeatedField(fieldType: ProtobufString.self, value: &showNameRegexes)
    case 12: handled = try setter.decodeRepeatedField(fieldType: ProtobufString.self, value: &hideNameRegexes)
    case 13: handled = try setter.decodeSingularField(fieldType: ProtobufBool.self, value: &_accountDisplayedOpOnly)
    case 14: handled = try setter.decodeRepeatedField(fieldType: ProtobufString.self, value: &select)
    case 15: handled = try setter.decodeSingularField(fieldType: ProtobufBool.self, value: &_viz)
    case 16: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_dumpToFile)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if let v = _maxDepth {
      try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: v, protoFieldNumber: 1, protoFieldName: "max_depth", jsonFieldName: "maxDepth", swiftFieldName: "maxDepth")
    }
    if let v = _minBytes {
      try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: v, protoFieldNumber: 2, protoFieldName: "min_bytes", jsonFieldName: "minBytes", swiftFieldName: "minBytes")
    }
    if let v = _minMicros {
      try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: v, protoFieldNumber: 3, protoFieldName: "min_micros", jsonFieldName: "minMicros", swiftFieldName: "minMicros")
    }
    if let v = _minParams {
      try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: v, protoFieldNumber: 4, protoFieldName: "min_params", jsonFieldName: "minParams", swiftFieldName: "minParams")
    }
    if let v = _minFloatOps {
      try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: v, protoFieldNumber: 5, protoFieldName: "min_float_ops", jsonFieldName: "minFloatOps", swiftFieldName: "minFloatOps")
    }
    if !deviceRegexes.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufString.self, value: deviceRegexes, protoFieldNumber: 6, protoFieldName: "device_regexes", jsonFieldName: "deviceRegexes", swiftFieldName: "deviceRegexes")
    }
    if let v = _orderBy {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 7, protoFieldName: "order_by", jsonFieldName: "orderBy", swiftFieldName: "orderBy")
    }
    if !accountTypeRegexes.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufString.self, value: accountTypeRegexes, protoFieldNumber: 8, protoFieldName: "account_type_regexes", jsonFieldName: "accountTypeRegexes", swiftFieldName: "accountTypeRegexes")
    }
    if !startNameRegexes.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufString.self, value: startNameRegexes, protoFieldNumber: 9, protoFieldName: "start_name_regexes", jsonFieldName: "startNameRegexes", swiftFieldName: "startNameRegexes")
    }
    if !trimNameRegexes.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufString.self, value: trimNameRegexes, protoFieldNumber: 10, protoFieldName: "trim_name_regexes", jsonFieldName: "trimNameRegexes", swiftFieldName: "trimNameRegexes")
    }
    if !showNameRegexes.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufString.self, value: showNameRegexes, protoFieldNumber: 11, protoFieldName: "show_name_regexes", jsonFieldName: "showNameRegexes", swiftFieldName: "showNameRegexes")
    }
    if !hideNameRegexes.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufString.self, value: hideNameRegexes, protoFieldNumber: 12, protoFieldName: "hide_name_regexes", jsonFieldName: "hideNameRegexes", swiftFieldName: "hideNameRegexes")
    }
    if let v = _accountDisplayedOpOnly {
      try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 13, protoFieldName: "account_displayed_op_only", jsonFieldName: "accountDisplayedOpOnly", swiftFieldName: "accountDisplayedOpOnly")
    }
    if !select.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufString.self, value: select, protoFieldNumber: 14, protoFieldName: "select", jsonFieldName: "select", swiftFieldName: "select")
    }
    if let v = _viz {
      try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 15, protoFieldName: "viz", jsonFieldName: "viz", swiftFieldName: "viz")
    }
    if let v = _dumpToFile {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 16, protoFieldName: "dump_to_file", jsonFieldName: "dumpToFile", swiftFieldName: "dumpToFile")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Tensorflow_Tfprof_OptionsProto) -> Bool {
    if (maxDepth != other.maxDepth) {return false}
    if (minBytes != other.minBytes) {return false}
    if (minMicros != other.minMicros) {return false}
    if (minParams != other.minParams) {return false}
    if (minFloatOps != other.minFloatOps) {return false}
    if deviceRegexes != other.deviceRegexes {return false}
    if (orderBy != other.orderBy) {return false}
    if accountTypeRegexes != other.accountTypeRegexes {return false}
    if startNameRegexes != other.startNameRegexes {return false}
    if trimNameRegexes != other.trimNameRegexes {return false}
    if showNameRegexes != other.showNameRegexes {return false}
    if hideNameRegexes != other.hideNameRegexes {return false}
    if (accountDisplayedOpOnly != other.accountDisplayedOpOnly) {return false}
    if select != other.select {return false}
    if (viz != other.viz) {return false}
    if (dumpToFile != other.dumpToFile) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}
