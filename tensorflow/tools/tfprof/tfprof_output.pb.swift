/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: tensorflow/tools/tfprof/tfprof_output.proto
 *
 */

import Foundation
import SwiftProtobuf


struct Tensorflow_Tfprof_TFProfTensorProto: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Tensorflow_Tfprof_TFProfTensorProto"}
  public var protoMessageName: String {return "TFProfTensorProto"}
  public var protoPackageName: String {return "tensorflow.tfprof"}
  public var jsonFieldNames: [String: Int] {return [
    "dtype": 1,
    "valueDouble": 2,
    "valueInt64": 3,
    "valueStr": 4,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "dtype": 1,
    "value_double": 2,
    "value_int64": 3,
    "value_str": 4,
  ]}

  var unknown = ProtobufUnknownStorage()

  private var _dtype: Tensorflow_DataType? = nil
  public var dtype: Tensorflow_DataType {
    get {return _dtype ?? Tensorflow_DataType.dtInvalid}
    set {_dtype = newValue}
  }
  public var hasDtype: Bool {
    return _dtype != nil
  }
  public mutating func clearDtype() {
    return _dtype = nil
  }

  ///   Flatten tensor in row-major.
  ///   Only one of the following array is set.
  public var valueDouble: [Double] = []

  public var valueInt64: [Int64] = []

  public var valueStr: [String] = []

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: Tensorflow_DataType.self, value: &_dtype)
    case 2: handled = try setter.decodeRepeatedField(fieldType: ProtobufDouble.self, value: &valueDouble)
    case 3: handled = try setter.decodeRepeatedField(fieldType: ProtobufInt64.self, value: &valueInt64)
    case 4: handled = try setter.decodeRepeatedField(fieldType: ProtobufString.self, value: &valueStr)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if let v = _dtype {
      try visitor.visitSingularField(fieldType: Tensorflow_DataType.self, value: v, protoFieldNumber: 1, protoFieldName: "dtype", jsonFieldName: "dtype", swiftFieldName: "dtype")
    }
    if !valueDouble.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufDouble.self, value: valueDouble, protoFieldNumber: 2, protoFieldName: "value_double", jsonFieldName: "valueDouble", swiftFieldName: "valueDouble")
    }
    if !valueInt64.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufInt64.self, value: valueInt64, protoFieldNumber: 3, protoFieldName: "value_int64", jsonFieldName: "valueInt64", swiftFieldName: "valueInt64")
    }
    if !valueStr.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufString.self, value: valueStr, protoFieldNumber: 4, protoFieldName: "value_str", jsonFieldName: "valueStr", swiftFieldName: "valueStr")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Tensorflow_Tfprof_TFProfTensorProto) -> Bool {
    if (dtype != other.dtype) {return false}
    if valueDouble != other.valueDouble {return false}
    if valueInt64 != other.valueInt64 {return false}
    if valueStr != other.valueStr {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct Tensorflow_Tfprof_TFProfNode: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Tensorflow_Tfprof_TFProfNode"}
  public var protoMessageName: String {return "TFProfNode"}
  public var protoPackageName: String {return "tensorflow.tfprof"}
  public var jsonFieldNames: [String: Int] {return [
    "name": 1,
    "tensorValue": 15,
    "execMicros": 2,
    "requestedBytes": 3,
    "parameters": 4,
    "floatOps": 13,
    "inputs": 5,
    "device": 10,
    "totalExecMicros": 6,
    "totalRequestedBytes": 7,
    "totalParameters": 8,
    "totalFloatOps": 14,
    "totalInputs": 9,
    "shapes": 11,
    "children": 12,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "name": 1,
    "tensor_value": 15,
    "exec_micros": 2,
    "requested_bytes": 3,
    "parameters": 4,
    "float_ops": 13,
    "inputs": 5,
    "device": 10,
    "total_exec_micros": 6,
    "total_requested_bytes": 7,
    "total_parameters": 8,
    "total_float_ops": 14,
    "total_inputs": 9,
    "shapes": 11,
    "children": 12,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Tensorflow_Tfprof_TFProfNode
    var unknown = ProtobufUnknownStorage()
    var _name: String? = nil
    var _tensorValue: Tensorflow_Tfprof_TFProfTensorProto? = nil
    var _execMicros: Int64? = nil
    var _requestedBytes: Int64? = nil
    var _parameters: Int64? = nil
    var _floatOps: Int64? = nil
    var _inputs: Int64? = nil
    var _device: String? = nil
    var _totalExecMicros: Int64? = nil
    var _totalRequestedBytes: Int64? = nil
    var _totalParameters: Int64? = nil
    var _totalFloatOps: Int64? = nil
    var _totalInputs: Int64? = nil
    var _shapes: [Tensorflow_TensorShapeProto] = []
    var _children: [Tensorflow_Tfprof_TFProfNode] = []

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_name)
      case 15: handled = try setter.decodeSingularMessageField(fieldType: Tensorflow_Tfprof_TFProfTensorProto.self, value: &_tensorValue)
      case 2: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_execMicros)
      case 3: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_requestedBytes)
      case 4: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_parameters)
      case 13: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_floatOps)
      case 5: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_inputs)
      case 10: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_device)
      case 6: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_totalExecMicros)
      case 7: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_totalRequestedBytes)
      case 8: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_totalParameters)
      case 14: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_totalFloatOps)
      case 9: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_totalInputs)
      case 11: handled = try setter.decodeRepeatedMessageField(fieldType: Tensorflow_TensorShapeProto.self, value: &_shapes)
      case 12: handled = try setter.decodeRepeatedMessageField(fieldType: Tensorflow_Tfprof_TFProfNode.self, value: &_children)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _name {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 1, protoFieldName: "name", jsonFieldName: "name", swiftFieldName: "name")
      }
      if let v = _execMicros {
        try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: v, protoFieldNumber: 2, protoFieldName: "exec_micros", jsonFieldName: "execMicros", swiftFieldName: "execMicros")
      }
      if let v = _requestedBytes {
        try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: v, protoFieldNumber: 3, protoFieldName: "requested_bytes", jsonFieldName: "requestedBytes", swiftFieldName: "requestedBytes")
      }
      if let v = _parameters {
        try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: v, protoFieldNumber: 4, protoFieldName: "parameters", jsonFieldName: "parameters", swiftFieldName: "parameters")
      }
      if let v = _inputs {
        try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: v, protoFieldNumber: 5, protoFieldName: "inputs", jsonFieldName: "inputs", swiftFieldName: "inputs")
      }
      if let v = _totalExecMicros {
        try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: v, protoFieldNumber: 6, protoFieldName: "total_exec_micros", jsonFieldName: "totalExecMicros", swiftFieldName: "totalExecMicros")
      }
      if let v = _totalRequestedBytes {
        try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: v, protoFieldNumber: 7, protoFieldName: "total_requested_bytes", jsonFieldName: "totalRequestedBytes", swiftFieldName: "totalRequestedBytes")
      }
      if let v = _totalParameters {
        try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: v, protoFieldNumber: 8, protoFieldName: "total_parameters", jsonFieldName: "totalParameters", swiftFieldName: "totalParameters")
      }
      if let v = _totalInputs {
        try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: v, protoFieldNumber: 9, protoFieldName: "total_inputs", jsonFieldName: "totalInputs", swiftFieldName: "totalInputs")
      }
      if let v = _device {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 10, protoFieldName: "device", jsonFieldName: "device", swiftFieldName: "device")
      }
      if !_shapes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _shapes, protoFieldNumber: 11, protoFieldName: "shapes", jsonFieldName: "shapes", swiftFieldName: "shapes")
      }
      if !_children.isEmpty {
        try visitor.visitRepeatedMessageField(value: _children, protoFieldNumber: 12, protoFieldName: "children", jsonFieldName: "children", swiftFieldName: "children")
      }
      if let v = _floatOps {
        try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: v, protoFieldNumber: 13, protoFieldName: "float_ops", jsonFieldName: "floatOps", swiftFieldName: "floatOps")
      }
      if let v = _totalFloatOps {
        try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: v, protoFieldNumber: 14, protoFieldName: "total_float_ops", jsonFieldName: "totalFloatOps", swiftFieldName: "totalFloatOps")
      }
      if let v = _tensorValue {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 15, protoFieldName: "tensor_value", jsonFieldName: "tensorValue", swiftFieldName: "tensorValue")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if (_name != other._name) {return false}
      if ((_tensorValue != nil || other._tensorValue != nil) && (_tensorValue == nil || other._tensorValue == nil || _tensorValue! != other._tensorValue!)) {return false}
      if (_execMicros != other._execMicros) {return false}
      if (_requestedBytes != other._requestedBytes) {return false}
      if (_parameters != other._parameters) {return false}
      if (_floatOps != other._floatOps) {return false}
      if (_inputs != other._inputs) {return false}
      if (_device != other._device) {return false}
      if (_totalExecMicros != other._totalExecMicros) {return false}
      if (_totalRequestedBytes != other._totalRequestedBytes) {return false}
      if (_totalParameters != other._totalParameters) {return false}
      if (_totalFloatOps != other._totalFloatOps) {return false}
      if (_totalInputs != other._totalInputs) {return false}
      if _shapes != other._shapes {return false}
      if _children != other._children {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._name = _name
      clone._tensorValue = _tensorValue
      clone._execMicros = _execMicros
      clone._requestedBytes = _requestedBytes
      clone._parameters = _parameters
      clone._floatOps = _floatOps
      clone._inputs = _inputs
      clone._device = _device
      clone._totalExecMicros = _totalExecMicros
      clone._totalRequestedBytes = _totalRequestedBytes
      clone._totalParameters = _totalParameters
      clone._totalFloatOps = _totalFloatOps
      clone._totalInputs = _totalInputs
      clone._shapes = _shapes
      clone._children = _children
      return clone
    }
  }

  private var _storage = _StorageClass()

  ///   op name.
  public var name: String {
    get {return _storage._name ?? ""}
    set {_uniqueStorage()._name = newValue}
  }
  public var hasName: Bool {
    return _storage._name != nil
  }
  public mutating func clearName() {
    return _storage._name = nil
  }

  ///   tensor value restored from checkpoint.
  public var tensorValue: Tensorflow_Tfprof_TFProfTensorProto {
    get {return _storage._tensorValue ?? Tensorflow_Tfprof_TFProfTensorProto()}
    set {_uniqueStorage()._tensorValue = newValue}
  }
  public var hasTensorValue: Bool {
    return _storage._tensorValue != nil
  }
  public mutating func clearTensorValue() {
    return _storage._tensorValue = nil
  }

  ///   op execution time.
  public var execMicros: Int64 {
    get {return _storage._execMicros ?? 0}
    set {_uniqueStorage()._execMicros = newValue}
  }
  public var hasExecMicros: Bool {
    return _storage._execMicros != nil
  }
  public mutating func clearExecMicros() {
    return _storage._execMicros = nil
  }

  ///   Total requested bytes by the op.
  public var requestedBytes: Int64 {
    get {return _storage._requestedBytes ?? 0}
    set {_uniqueStorage()._requestedBytes = newValue}
  }
  public var hasRequestedBytes: Bool {
    return _storage._requestedBytes != nil
  }
  public mutating func clearRequestedBytes() {
    return _storage._requestedBytes = nil
  }

  ///   Number of parameters if available.
  public var parameters: Int64 {
    get {return _storage._parameters ?? 0}
    set {_uniqueStorage()._parameters = newValue}
  }
  public var hasParameters: Bool {
    return _storage._parameters != nil
  }
  public mutating func clearParameters() {
    return _storage._parameters = nil
  }

  ///   Number of float operations.
  public var floatOps: Int64 {
    get {return _storage._floatOps ?? 0}
    set {_uniqueStorage()._floatOps = newValue}
  }
  public var hasFloatOps: Bool {
    return _storage._floatOps != nil
  }
  public mutating func clearFloatOps() {
    return _storage._floatOps = nil
  }

  ///   Number of inputs to the op.
  public var inputs: Int64 {
    get {return _storage._inputs ?? 0}
    set {_uniqueStorage()._inputs = newValue}
  }
  public var hasInputs: Bool {
    return _storage._inputs != nil
  }
  public mutating func clearInputs() {
    return _storage._inputs = nil
  }

  ///   Device the op is assigned to.
  public var device: String {
    get {return _storage._device ?? ""}
    set {_uniqueStorage()._device = newValue}
  }
  public var hasDevice: Bool {
    return _storage._device != nil
  }
  public mutating func clearDevice() {
    return _storage._device = nil
  }

  ///   The following are the aggregated stats from all accounted descendants and
  ///   the op itself. The actual descendants depend on the data structure used
  ///   (scope, graph).
  public var totalExecMicros: Int64 {
    get {return _storage._totalExecMicros ?? 0}
    set {_uniqueStorage()._totalExecMicros = newValue}
  }
  public var hasTotalExecMicros: Bool {
    return _storage._totalExecMicros != nil
  }
  public mutating func clearTotalExecMicros() {
    return _storage._totalExecMicros = nil
  }

  public var totalRequestedBytes: Int64 {
    get {return _storage._totalRequestedBytes ?? 0}
    set {_uniqueStorage()._totalRequestedBytes = newValue}
  }
  public var hasTotalRequestedBytes: Bool {
    return _storage._totalRequestedBytes != nil
  }
  public mutating func clearTotalRequestedBytes() {
    return _storage._totalRequestedBytes = nil
  }

  public var totalParameters: Int64 {
    get {return _storage._totalParameters ?? 0}
    set {_uniqueStorage()._totalParameters = newValue}
  }
  public var hasTotalParameters: Bool {
    return _storage._totalParameters != nil
  }
  public mutating func clearTotalParameters() {
    return _storage._totalParameters = nil
  }

  public var totalFloatOps: Int64 {
    get {return _storage._totalFloatOps ?? 0}
    set {_uniqueStorage()._totalFloatOps = newValue}
  }
  public var hasTotalFloatOps: Bool {
    return _storage._totalFloatOps != nil
  }
  public mutating func clearTotalFloatOps() {
    return _storage._totalFloatOps = nil
  }

  public var totalInputs: Int64 {
    get {return _storage._totalInputs ?? 0}
    set {_uniqueStorage()._totalInputs = newValue}
  }
  public var hasTotalInputs: Bool {
    return _storage._totalInputs != nil
  }
  public mutating func clearTotalInputs() {
    return _storage._totalInputs = nil
  }

  ///   shape information, if available.
  public var shapes: [Tensorflow_TensorShapeProto] {
    get {return _storage._shapes}
    set {_uniqueStorage()._shapes = newValue}
  }

  ///   Descendants of the graph. The actual descendants depend on the data
  ///   structure used (scope, graph).
  public var children: [Tensorflow_Tfprof_TFProfNode] {
    get {return _storage._children}
    set {_uniqueStorage()._children = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Tensorflow_Tfprof_TFProfNode) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}
