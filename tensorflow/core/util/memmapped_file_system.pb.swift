/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: tensorflow/core/util/memmapped_file_system.proto
 *
 */

///   Copyright 2016 The TensorFlow Authors. All Rights Reserved.
///  
///  Licensed under the Apache License, Version 2.0 (the "License");
///  you may not use this file except in compliance with the License.
///  You may obtain a copy of the License at
///  
///  http://www.apache.org/licenses/LICENSE-2.0
///  
///  Unless required by applicable law or agreed to in writing, software
///  distributed under the License is distributed on an "AS IS" BASIS,
///  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
///  See the License for the specific language governing permissions and
///  limitations under the License.
///  ==============================================================================

import Foundation
import SwiftProtobuf


///   A message that describes one region of memmapped file.
struct Tensorflow_MemmappedFileSystemDirectoryElement: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Tensorflow_MemmappedFileSystemDirectoryElement"}
  public var protoMessageName: String {return "MemmappedFileSystemDirectoryElement"}
  public var protoPackageName: String {return "tensorflow"}
  public var jsonFieldNames: [String: Int] {return [
    "offset": 1,
    "name": 2,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "offset": 1,
    "name": 2,
  ]}

  public var offset: UInt64 = 0

  public var name: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufUInt64.self, value: &offset)
    case 2: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &name)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if offset != 0 {
      try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: offset, protoFieldNumber: 1, protoFieldName: "offset", jsonFieldName: "offset", swiftFieldName: "offset")
    }
    if name != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: name, protoFieldNumber: 2, protoFieldName: "name", jsonFieldName: "name", swiftFieldName: "name")
    }
  }

  public func _protoc_generated_isEqualTo(other: Tensorflow_MemmappedFileSystemDirectoryElement) -> Bool {
    if offset != other.offset {return false}
    if name != other.name {return false}
    return true
  }
}

///   A directory of regions in a memmapped file.
struct Tensorflow_MemmappedFileSystemDirectory: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Tensorflow_MemmappedFileSystemDirectory"}
  public var protoMessageName: String {return "MemmappedFileSystemDirectory"}
  public var protoPackageName: String {return "tensorflow"}
  public var jsonFieldNames: [String: Int] {return [
    "element": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "element": 1,
  ]}

  public var element: [Tensorflow_MemmappedFileSystemDirectoryElement] = []

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRepeatedMessageField(fieldType: Tensorflow_MemmappedFileSystemDirectoryElement.self, value: &element)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !element.isEmpty {
      try visitor.visitRepeatedMessageField(value: element, protoFieldNumber: 1, protoFieldName: "element", jsonFieldName: "element", swiftFieldName: "element")
    }
  }

  public func _protoc_generated_isEqualTo(other: Tensorflow_MemmappedFileSystemDirectory) -> Bool {
    if element != other.element {return false}
    return true
  }
}
