/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: tensorflow/core/protobuf/tensorflow_server.proto
 *
 */

//  Copyright 2016 The TensorFlow Authors. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================

import Foundation
import SwiftProtobuf


//  This file contains protos to be used when defining a TensorFlow
//  cluster, and a server within that cluster.
// 
//  EXAMPLES
//  --------
// 
//  1. A single-process cluster, containing "/job:local/task:0".
// 
//     Cluster:
//       job { name: 'local' tasks { key: 0 value: 'localhost:2222' } }
// 
//     Server:
//       cluster { $CLUSTER } job_name: 'local' task_index: 0
// 
//  2. A two-process cluster, containing "/job:local/task:{0,1}".
// 
//     Cluster:
//       job { name: 'local' tasks { key: 0 value: 'localhost:2222' }
//                           tasks { key: 1 value: 'localhost:2223' } }
// 
//     Servers:
//       cluster { $CLUSTER } job_name: 'local' task_index: 0
//       cluster { $CLUSTER } job_name: 'local' task_index: 1
// 
//  3. A two-job cluster, containing "/job:worker/task:{0,1,2}" and
//     "/job:ps/task:{0,1}".
// 
//     Cluster:
//       job { name: 'worker' tasks { key: 0 value: 'worker1:2222' }
//                            tasks { key: 1 value: 'worker2:2222' }
//                            tasks { key: 2 value: 'worker3:2222' } }
//       job { name: 'ps'     tasks { key: 0 value: 'ps0:2222' }
//                            tasks { key: 1 value: 'ps1:2222' } }
// 
//     Servers:
//       cluster { $CLUSTER } job_name: 'worker' task_index: 0
//       cluster { $CLUSTER } job_name: 'worker' task_index: 1
//       cluster { $CLUSTER } job_name: 'worker' task_index: 2
//       cluster { $CLUSTER } job_name: 'ps'     task_index: 0
//       cluster { $CLUSTER } job_name: 'ps'     task_index: 1

///   Defines a single job in a TensorFlow cluster.
struct Tensorflow_JobDef: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Tensorflow_JobDef"}
  public var protoMessageName: String {return "JobDef"}
  public var protoPackageName: String {return "tensorflow"}
  public var jsonFieldNames: [String: Int] {return [
    "name": 1,
    "tasks": 2,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "name": 1,
    "tasks": 2,
  ]}

  ///   The name of this job.
  public var name: String = ""

  ///   Mapping from task ID to "hostname:port" string.
  ///  
  ///   If the `name` field contains "worker", and the `tasks` map contains a
  ///   mapping from 7 to "example.org:2222", then the device prefix
  ///   "/job:worker/task:7" will be assigned to "example.org:2222".
  ///  
  ///   NOTE(mrry): Currently, only a dense task ID space starting at 0 is
  ///   supported.
  public var tasks: Dictionary<Int32,String> = [:]

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &name)
    case 2: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufString>.self, value: &tasks)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if name != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: name, protoFieldNumber: 1, protoFieldName: "name", jsonFieldName: "name", swiftFieldName: "name")
    }
    if !tasks.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufString>.self, value: tasks, protoFieldNumber: 2, protoFieldName: "tasks", jsonFieldName: "tasks", swiftFieldName: "tasks")
    }
  }

  public func _protoc_generated_isEqualTo(other: Tensorflow_JobDef) -> Bool {
    if name != other.name {return false}
    if tasks != other.tasks {return false}
    return true
  }
}

///   Defines a TensorFlow cluster as a set of jobs.
struct Tensorflow_ClusterDef: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Tensorflow_ClusterDef"}
  public var protoMessageName: String {return "ClusterDef"}
  public var protoPackageName: String {return "tensorflow"}
  public var jsonFieldNames: [String: Int] {return [
    "job": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "job": 1,
  ]}

  ///   The jobs that comprise the cluster.
  public var job: [Tensorflow_JobDef] = []

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRepeatedMessageField(fieldType: Tensorflow_JobDef.self, value: &job)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !job.isEmpty {
      try visitor.visitRepeatedMessageField(value: job, protoFieldNumber: 1, protoFieldName: "job", jsonFieldName: "job", swiftFieldName: "job")
    }
  }

  public func _protoc_generated_isEqualTo(other: Tensorflow_ClusterDef) -> Bool {
    if job != other.job {return false}
    return true
  }
}

///   Defines the configuration of a single TensorFlow server.
struct Tensorflow_ServerDef: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Tensorflow_ServerDef"}
  public var protoMessageName: String {return "ServerDef"}
  public var protoPackageName: String {return "tensorflow"}
  public var jsonFieldNames: [String: Int] {return [
    "cluster": 1,
    "jobName": 2,
    "taskIndex": 3,
    "defaultSessionConfig": 4,
    "protocol": 5,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "cluster": 1,
    "job_name": 2,
    "task_index": 3,
    "default_session_config": 4,
    "protocol": 5,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Tensorflow_ServerDef
    var _cluster: Tensorflow_ClusterDef? = nil
    var _jobName: String = ""
    var _taskIndex: Int32 = 0
    var _defaultSessionConfig: Tensorflow_ConfigProto? = nil
    var _protocol_p: String = ""

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularMessageField(fieldType: Tensorflow_ClusterDef.self, value: &_cluster)
      case 2: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_jobName)
      case 3: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_taskIndex)
      case 4: handled = try setter.decodeSingularMessageField(fieldType: Tensorflow_ConfigProto.self, value: &_defaultSessionConfig)
      case 5: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_protocol_p)
      default:
        handled = false
      }
      return handled
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _cluster {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "cluster", jsonFieldName: "cluster", swiftFieldName: "cluster")
      }
      if _jobName != "" {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: _jobName, protoFieldNumber: 2, protoFieldName: "job_name", jsonFieldName: "jobName", swiftFieldName: "jobName")
      }
      if _taskIndex != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _taskIndex, protoFieldNumber: 3, protoFieldName: "task_index", jsonFieldName: "taskIndex", swiftFieldName: "taskIndex")
      }
      if let v = _defaultSessionConfig {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 4, protoFieldName: "default_session_config", jsonFieldName: "defaultSessionConfig", swiftFieldName: "defaultSessionConfig")
      }
      if _protocol_p != "" {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: _protocol_p, protoFieldNumber: 5, protoFieldName: "protocol", jsonFieldName: "protocol", swiftFieldName: "protocol_p")
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _cluster != other._cluster {return false}
      if _jobName != other._jobName {return false}
      if _taskIndex != other._taskIndex {return false}
      if _defaultSessionConfig != other._defaultSessionConfig {return false}
      if _protocol_p != other._protocol_p {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._cluster = _cluster
      clone._jobName = _jobName
      clone._taskIndex = _taskIndex
      clone._defaultSessionConfig = _defaultSessionConfig
      clone._protocol_p = _protocol_p
      return clone
    }
  }

  private var _storage = _StorageClass()

  ///   The cluster of which this server is a member.
  public var cluster: Tensorflow_ClusterDef {
    get {return _storage._cluster ?? Tensorflow_ClusterDef()}
    set {_uniqueStorage()._cluster = newValue}
  }
  public var hasCluster: Bool {
    return _storage._cluster != nil
  }
  public mutating func clearCluster() {
    return _storage._cluster = nil
  }

  ///   The name of the job of which this server is a member.
  ///  
  ///   NOTE(mrry): The `cluster` field must contain a `JobDef` with a `name` field
  ///   that matches this name.
  public var jobName: String {
    get {return _storage._jobName}
    set {_uniqueStorage()._jobName = newValue}
  }

  ///   The task index of this server in its job.
  ///  
  ///   NOTE: The `cluster` field must contain a `JobDef` with a matching `name`
  ///   and a mapping in its `tasks` field for this index.
  public var taskIndex: Int32 {
    get {return _storage._taskIndex}
    set {_uniqueStorage()._taskIndex = newValue}
  }

  ///   The default configuration for sessions that run on this server.
  public var defaultSessionConfig: Tensorflow_ConfigProto {
    get {return _storage._defaultSessionConfig ?? Tensorflow_ConfigProto()}
    set {_uniqueStorage()._defaultSessionConfig = newValue}
  }
  public var hasDefaultSessionConfig: Bool {
    return _storage._defaultSessionConfig != nil
  }
  public mutating func clearDefaultSessionConfig() {
    return _storage._defaultSessionConfig = nil
  }

  ///   The protocol to be used by this server.
  ///  
  ///   Acceptable values include: "grpc".
  public var protocol_p: String {
    get {return _storage._protocol_p}
    set {_uniqueStorage()._protocol_p = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Tensorflow_ServerDef) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}
