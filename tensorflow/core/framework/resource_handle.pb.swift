/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: tensorflow/core/framework/resource_handle.proto
 *
 */

import Foundation
import SwiftProtobuf


///   Protocol buffer representing a handle to a tensorflow resource. Handles are
///   not valid across executions, but can be serialized back and forth from within
///   a single run.
struct Tensorflow_ResourceHandle: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Tensorflow_ResourceHandle"}
  public var protoMessageName: String {return "ResourceHandle"}
  public var protoPackageName: String {return "tensorflow"}
  public var jsonFieldNames: [String: Int] {return [
    "device": 1,
    "container": 2,
    "name": 3,
    "hashCode": 4,
    "maybeTypeName": 5,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "device": 1,
    "container": 2,
    "name": 3,
    "hash_code": 4,
    "maybe_type_name": 5,
  ]}

  ///   Unique name for the device containing the resource.
  public var device: String = ""

  ///   Container in which this resource is placed.
  public var container: String = ""

  ///   Unique name of this resource.
  public var name: String = ""

  ///   Hash code for the type of the resource. Is only valid in the same device
  ///   and in the same execution.
  public var hashCode: UInt64 = 0

  ///   For debug-only, the name of the type pointed to by this handle, if
  ///   available.
  public var maybeTypeName: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &device)
    case 2: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &container)
    case 3: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &name)
    case 4: handled = try setter.decodeSingularField(fieldType: ProtobufUInt64.self, value: &hashCode)
    case 5: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &maybeTypeName)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if device != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: device, protoFieldNumber: 1, protoFieldName: "device", jsonFieldName: "device", swiftFieldName: "device")
    }
    if container != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: container, protoFieldNumber: 2, protoFieldName: "container", jsonFieldName: "container", swiftFieldName: "container")
    }
    if name != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: name, protoFieldNumber: 3, protoFieldName: "name", jsonFieldName: "name", swiftFieldName: "name")
    }
    if hashCode != 0 {
      try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: hashCode, protoFieldNumber: 4, protoFieldName: "hash_code", jsonFieldName: "hashCode", swiftFieldName: "hashCode")
    }
    if maybeTypeName != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: maybeTypeName, protoFieldNumber: 5, protoFieldName: "maybe_type_name", jsonFieldName: "maybeTypeName", swiftFieldName: "maybeTypeName")
    }
  }

  public func _protoc_generated_isEqualTo(other: Tensorflow_ResourceHandle) -> Bool {
    if device != other.device {return false}
    if container != other.container {return false}
    if name != other.name {return false}
    if hashCode != other.hashCode {return false}
    if maybeTypeName != other.maybeTypeName {return false}
    return true
  }
}
