/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: tensorflow/core/framework/node_def.proto
 *
 */

import Foundation
import SwiftProtobuf


struct Tensorflow_NodeDef: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Tensorflow_NodeDef"}
  public var protoMessageName: String {return "NodeDef"}
  public var protoPackageName: String {return "tensorflow"}
  public var jsonFieldNames: [String: Int] {return [
    "name": 1,
    "op": 2,
    "input": 3,
    "device": 4,
    "attr": 5,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "name": 1,
    "op": 2,
    "input": 3,
    "device": 4,
    "attr": 5,
  ]}

  ///   The name given to this operator. Used for naming inputs,
  ///   logging, visualization, etc.  Unique within a single GraphDef.
  ///   Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_./]*".
  public var name: String = ""

  ///   The operation name.  There may be custom parameters in attrs.
  ///   Op names starting with an underscore are reserved for internal use.
  public var op: String = ""

  ///   Each input is "node:src_output" with "node" being a string name and
  ///   "src_output" indicating which output tensor to use from "node". If
  ///   "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
  ///   may optionally be followed by control inputs that have the format
  ///   "^node".
  public var input: [String] = []

  ///   A (possibly partial) specification for the device on which this
  ///   node should be placed.
  ///   The expected syntax for this string is as follows:
  ///  
  ///   DEVICE_SPEC ::= COLOCATED_NODE | PARTIAL_SPEC
  ///  
  ///   COLOCATED_NODE ::= "@" NODE_NAME  // See NodeDef.name above.
  ///   PARTIAL_SPEC ::= ("/" CONSTRAINT) *
  ///   CONSTRAINT ::= ("job:" JOB_NAME)
  ///                | ("replica:" [1-9][0-9]*)
  ///                | ("task:" [1-9][0-9]*)
  ///                | ( ("gpu" | "cpu") ":" ([1-9][0-9]* | "*") )
  ///  
  ///   Valid values for this string include:
  ///   * "@other/node"                         (colocate with "other/node")
  ///   * "/job:worker/replica:0/task:1/gpu:3"  (full specification)
  ///   * "/job:worker/gpu:3"                   (partial specification)
  ///   * ""                                    (no specification)
  ///  
  ///   If the constraints do not resolve to a single device (or if this
  ///   field is empty or not present), the runtime will attempt to
  ///   choose a device automatically.
  public var device: String = ""

  ///   Operation-specific graph-construction-time configuration.
  ///   Note that this should include all attrs defined in the
  ///   corresponding OpDef, including those with a value matching
  ///   the default -- this allows the default to change and makes
  ///   NodeDefs easier to interpret on their own.  However, if
  ///   an attr with a default is not specified in this list, the
  ///   default will be used.
  ///   The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
  ///   one of the names from the corresponding OpDef's attr field).
  ///   The values must have a type matching the corresponding OpDef
  ///   attr's type field.
  ///   TODO(josh11b): Add some examples here showing best practices.
  public var attr: Dictionary<String,Tensorflow_AttrValue> = [:]

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &name)
    case 2: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &op)
    case 3: handled = try setter.decodeRepeatedField(fieldType: ProtobufString.self, value: &input)
    case 4: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &device)
    case 5: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufString,Tensorflow_AttrValue>.self, value: &attr)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if name != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: name, protoFieldNumber: 1, protoFieldName: "name", jsonFieldName: "name", swiftFieldName: "name")
    }
    if op != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: op, protoFieldNumber: 2, protoFieldName: "op", jsonFieldName: "op", swiftFieldName: "op")
    }
    if !input.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufString.self, value: input, protoFieldNumber: 3, protoFieldName: "input", jsonFieldName: "input", swiftFieldName: "input")
    }
    if device != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: device, protoFieldNumber: 4, protoFieldName: "device", jsonFieldName: "device", swiftFieldName: "device")
    }
    if !attr.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufString,Tensorflow_AttrValue>.self, value: attr, protoFieldNumber: 5, protoFieldName: "attr", jsonFieldName: "attr", swiftFieldName: "attr")
    }
  }

  public func _protoc_generated_isEqualTo(other: Tensorflow_NodeDef) -> Bool {
    if name != other.name {return false}
    if op != other.op {return false}
    if input != other.input {return false}
    if device != other.device {return false}
    if attr != other.attr {return false}
    return true
  }
}
