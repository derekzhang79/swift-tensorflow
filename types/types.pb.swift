/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: tensorflow/core/framework/types.proto
 *
 */

import Foundation
import SwiftProtobuf


///   LINT.IfChange
public enum Tensorflow_DataType: ProtobufEnum {
  public typealias RawValue = Int

  ///   Not a legal value for DataType.  Used to indicate a DataType field
  ///   has not been set.
  case dtInvalid // = 0

  ///   Data types that all computation devices are expected to be
  ///   capable to support.
  case dtFloat // = 1
  case dtDouble // = 2
  case dtInt32 // = 3
  case dtUint8 // = 4
  case dtInt16 // = 5
  case dtInt8 // = 6
  case dtString // = 7

  ///   Single-precision complex
  case dtComplex64 // = 8
  case dtInt64 // = 9
  case dtBool // = 10

  ///   Quantized int8
  case dtQint8 // = 11

  ///   Quantized uint8
  case dtQuint8 // = 12

  ///   Quantized int32
  case dtQint32 // = 13

  ///   Float32 truncated to 16 bits.  Only for cast ops.
  case dtBfloat16 // = 14

  ///   Quantized int16
  case dtQint16 // = 15

  ///   Quantized uint16
  case dtQuint16 // = 16
  case dtUint16 // = 17

  ///   Double-precision complex
  case dtComplex128 // = 18
  case dtHalf // = 19

  //  TODO(josh11b): DT_GENERIC_PROTO = ??;
  //  TODO(jeff,josh11b): DT_UINT64?  DT_UINT32?

  ///   Do not use!  These are only for parameters.  Every enum above
  ///   should have a corresponding value below (verified by types_test).
  case dtFloatRef // = 101
  case dtDoubleRef // = 102
  case dtInt32Ref // = 103
  case dtUint8Ref // = 104
  case dtInt16Ref // = 105
  case dtInt8Ref // = 106
  case dtStringRef // = 107
  case dtComplex64Ref // = 108
  case dtInt64Ref // = 109
  case dtBoolRef // = 110
  case dtQint8Ref // = 111
  case dtQuint8Ref // = 112
  case dtQint32Ref // = 113
  case dtBfloat16Ref // = 114
  case dtQint16Ref // = 115
  case dtQuint16Ref // = 116
  case dtUint16Ref // = 117
  case dtComplex128Ref // = 118
  case dtHalfRef // = 119
  case UNRECOGNIZED(Int)

  public init() {
    self = .dtInvalid
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .dtInvalid
    case 1: self = .dtFloat
    case 2: self = .dtDouble
    case 3: self = .dtInt32
    case 4: self = .dtUint8
    case 5: self = .dtInt16
    case 6: self = .dtInt8
    case 7: self = .dtString
    case 8: self = .dtComplex64
    case 9: self = .dtInt64
    case 10: self = .dtBool
    case 11: self = .dtQint8
    case 12: self = .dtQuint8
    case 13: self = .dtQint32
    case 14: self = .dtBfloat16
    case 15: self = .dtQint16
    case 16: self = .dtQuint16
    case 17: self = .dtUint16
    case 18: self = .dtComplex128
    case 19: self = .dtHalf
    case 101: self = .dtFloatRef
    case 102: self = .dtDoubleRef
    case 103: self = .dtInt32Ref
    case 104: self = .dtUint8Ref
    case 105: self = .dtInt16Ref
    case 106: self = .dtInt8Ref
    case 107: self = .dtStringRef
    case 108: self = .dtComplex64Ref
    case 109: self = .dtInt64Ref
    case 110: self = .dtBoolRef
    case 111: self = .dtQint8Ref
    case 112: self = .dtQuint8Ref
    case 113: self = .dtQint32Ref
    case 114: self = .dtBfloat16Ref
    case 115: self = .dtQint16Ref
    case 116: self = .dtQuint16Ref
    case 117: self = .dtUint16Ref
    case 118: self = .dtComplex128Ref
    case 119: self = .dtHalfRef
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public init?(name: String) {
    switch name {
    case "dtInvalid": self = .dtInvalid
    case "dtFloat": self = .dtFloat
    case "dtDouble": self = .dtDouble
    case "dtInt32": self = .dtInt32
    case "dtUint8": self = .dtUint8
    case "dtInt16": self = .dtInt16
    case "dtInt8": self = .dtInt8
    case "dtString": self = .dtString
    case "dtComplex64": self = .dtComplex64
    case "dtInt64": self = .dtInt64
    case "dtBool": self = .dtBool
    case "dtQint8": self = .dtQint8
    case "dtQuint8": self = .dtQuint8
    case "dtQint32": self = .dtQint32
    case "dtBfloat16": self = .dtBfloat16
    case "dtQint16": self = .dtQint16
    case "dtQuint16": self = .dtQuint16
    case "dtUint16": self = .dtUint16
    case "dtComplex128": self = .dtComplex128
    case "dtHalf": self = .dtHalf
    case "dtFloatRef": self = .dtFloatRef
    case "dtDoubleRef": self = .dtDoubleRef
    case "dtInt32Ref": self = .dtInt32Ref
    case "dtUint8Ref": self = .dtUint8Ref
    case "dtInt16Ref": self = .dtInt16Ref
    case "dtInt8Ref": self = .dtInt8Ref
    case "dtStringRef": self = .dtStringRef
    case "dtComplex64Ref": self = .dtComplex64Ref
    case "dtInt64Ref": self = .dtInt64Ref
    case "dtBoolRef": self = .dtBoolRef
    case "dtQint8Ref": self = .dtQint8Ref
    case "dtQuint8Ref": self = .dtQuint8Ref
    case "dtQint32Ref": self = .dtQint32Ref
    case "dtBfloat16Ref": self = .dtBfloat16Ref
    case "dtQint16Ref": self = .dtQint16Ref
    case "dtQuint16Ref": self = .dtQuint16Ref
    case "dtUint16Ref": self = .dtUint16Ref
    case "dtComplex128Ref": self = .dtComplex128Ref
    case "dtHalfRef": self = .dtHalfRef
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "DT_INVALID": self = .dtInvalid
    case "DT_FLOAT": self = .dtFloat
    case "DT_DOUBLE": self = .dtDouble
    case "DT_INT32": self = .dtInt32
    case "DT_UINT8": self = .dtUint8
    case "DT_INT16": self = .dtInt16
    case "DT_INT8": self = .dtInt8
    case "DT_STRING": self = .dtString
    case "DT_COMPLEX64": self = .dtComplex64
    case "DT_INT64": self = .dtInt64
    case "DT_BOOL": self = .dtBool
    case "DT_QINT8": self = .dtQint8
    case "DT_QUINT8": self = .dtQuint8
    case "DT_QINT32": self = .dtQint32
    case "DT_BFLOAT16": self = .dtBfloat16
    case "DT_QINT16": self = .dtQint16
    case "DT_QUINT16": self = .dtQuint16
    case "DT_UINT16": self = .dtUint16
    case "DT_COMPLEX128": self = .dtComplex128
    case "DT_HALF": self = .dtHalf
    case "DT_FLOAT_REF": self = .dtFloatRef
    case "DT_DOUBLE_REF": self = .dtDoubleRef
    case "DT_INT32_REF": self = .dtInt32Ref
    case "DT_UINT8_REF": self = .dtUint8Ref
    case "DT_INT16_REF": self = .dtInt16Ref
    case "DT_INT8_REF": self = .dtInt8Ref
    case "DT_STRING_REF": self = .dtStringRef
    case "DT_COMPLEX64_REF": self = .dtComplex64Ref
    case "DT_INT64_REF": self = .dtInt64Ref
    case "DT_BOOL_REF": self = .dtBoolRef
    case "DT_QINT8_REF": self = .dtQint8Ref
    case "DT_QUINT8_REF": self = .dtQuint8Ref
    case "DT_QINT32_REF": self = .dtQint32Ref
    case "DT_BFLOAT16_REF": self = .dtBfloat16Ref
    case "DT_QINT16_REF": self = .dtQint16Ref
    case "DT_QUINT16_REF": self = .dtQuint16Ref
    case "DT_UINT16_REF": self = .dtUint16Ref
    case "DT_COMPLEX128_REF": self = .dtComplex128Ref
    case "DT_HALF_REF": self = .dtHalfRef
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "DT_INVALID": self = .dtInvalid
    case "DT_FLOAT": self = .dtFloat
    case "DT_DOUBLE": self = .dtDouble
    case "DT_INT32": self = .dtInt32
    case "DT_UINT8": self = .dtUint8
    case "DT_INT16": self = .dtInt16
    case "DT_INT8": self = .dtInt8
    case "DT_STRING": self = .dtString
    case "DT_COMPLEX64": self = .dtComplex64
    case "DT_INT64": self = .dtInt64
    case "DT_BOOL": self = .dtBool
    case "DT_QINT8": self = .dtQint8
    case "DT_QUINT8": self = .dtQuint8
    case "DT_QINT32": self = .dtQint32
    case "DT_BFLOAT16": self = .dtBfloat16
    case "DT_QINT16": self = .dtQint16
    case "DT_QUINT16": self = .dtQuint16
    case "DT_UINT16": self = .dtUint16
    case "DT_COMPLEX128": self = .dtComplex128
    case "DT_HALF": self = .dtHalf
    case "DT_FLOAT_REF": self = .dtFloatRef
    case "DT_DOUBLE_REF": self = .dtDoubleRef
    case "DT_INT32_REF": self = .dtInt32Ref
    case "DT_UINT8_REF": self = .dtUint8Ref
    case "DT_INT16_REF": self = .dtInt16Ref
    case "DT_INT8_REF": self = .dtInt8Ref
    case "DT_STRING_REF": self = .dtStringRef
    case "DT_COMPLEX64_REF": self = .dtComplex64Ref
    case "DT_INT64_REF": self = .dtInt64Ref
    case "DT_BOOL_REF": self = .dtBoolRef
    case "DT_QINT8_REF": self = .dtQint8Ref
    case "DT_QUINT8_REF": self = .dtQuint8Ref
    case "DT_QINT32_REF": self = .dtQint32Ref
    case "DT_BFLOAT16_REF": self = .dtBfloat16Ref
    case "DT_QINT16_REF": self = .dtQint16Ref
    case "DT_QUINT16_REF": self = .dtQuint16Ref
    case "DT_UINT16_REF": self = .dtUint16Ref
    case "DT_COMPLEX128_REF": self = .dtComplex128Ref
    case "DT_HALF_REF": self = .dtHalfRef
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .dtInvalid: return 0
      case .dtFloat: return 1
      case .dtDouble: return 2
      case .dtInt32: return 3
      case .dtUint8: return 4
      case .dtInt16: return 5
      case .dtInt8: return 6
      case .dtString: return 7
      case .dtComplex64: return 8
      case .dtInt64: return 9
      case .dtBool: return 10
      case .dtQint8: return 11
      case .dtQuint8: return 12
      case .dtQint32: return 13
      case .dtBfloat16: return 14
      case .dtQint16: return 15
      case .dtQuint16: return 16
      case .dtUint16: return 17
      case .dtComplex128: return 18
      case .dtHalf: return 19
      case .dtFloatRef: return 101
      case .dtDoubleRef: return 102
      case .dtInt32Ref: return 103
      case .dtUint8Ref: return 104
      case .dtInt16Ref: return 105
      case .dtInt8Ref: return 106
      case .dtStringRef: return 107
      case .dtComplex64Ref: return 108
      case .dtInt64Ref: return 109
      case .dtBoolRef: return 110
      case .dtQint8Ref: return 111
      case .dtQuint8Ref: return 112
      case .dtQint32Ref: return 113
      case .dtBfloat16Ref: return 114
      case .dtQint16Ref: return 115
      case .dtQuint16Ref: return 116
      case .dtUint16Ref: return 117
      case .dtComplex128Ref: return 118
      case .dtHalfRef: return 119
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .dtInvalid: return "\"DT_INVALID\""
      case .dtFloat: return "\"DT_FLOAT\""
      case .dtDouble: return "\"DT_DOUBLE\""
      case .dtInt32: return "\"DT_INT32\""
      case .dtUint8: return "\"DT_UINT8\""
      case .dtInt16: return "\"DT_INT16\""
      case .dtInt8: return "\"DT_INT8\""
      case .dtString: return "\"DT_STRING\""
      case .dtComplex64: return "\"DT_COMPLEX64\""
      case .dtInt64: return "\"DT_INT64\""
      case .dtBool: return "\"DT_BOOL\""
      case .dtQint8: return "\"DT_QINT8\""
      case .dtQuint8: return "\"DT_QUINT8\""
      case .dtQint32: return "\"DT_QINT32\""
      case .dtBfloat16: return "\"DT_BFLOAT16\""
      case .dtQint16: return "\"DT_QINT16\""
      case .dtQuint16: return "\"DT_QUINT16\""
      case .dtUint16: return "\"DT_UINT16\""
      case .dtComplex128: return "\"DT_COMPLEX128\""
      case .dtHalf: return "\"DT_HALF\""
      case .dtFloatRef: return "\"DT_FLOAT_REF\""
      case .dtDoubleRef: return "\"DT_DOUBLE_REF\""
      case .dtInt32Ref: return "\"DT_INT32_REF\""
      case .dtUint8Ref: return "\"DT_UINT8_REF\""
      case .dtInt16Ref: return "\"DT_INT16_REF\""
      case .dtInt8Ref: return "\"DT_INT8_REF\""
      case .dtStringRef: return "\"DT_STRING_REF\""
      case .dtComplex64Ref: return "\"DT_COMPLEX64_REF\""
      case .dtInt64Ref: return "\"DT_INT64_REF\""
      case .dtBoolRef: return "\"DT_BOOL_REF\""
      case .dtQint8Ref: return "\"DT_QINT8_REF\""
      case .dtQuint8Ref: return "\"DT_QUINT8_REF\""
      case .dtQint32Ref: return "\"DT_QINT32_REF\""
      case .dtBfloat16Ref: return "\"DT_BFLOAT16_REF\""
      case .dtQint16Ref: return "\"DT_QINT16_REF\""
      case .dtQuint16Ref: return "\"DT_QUINT16_REF\""
      case .dtUint16Ref: return "\"DT_UINT16_REF\""
      case .dtComplex128Ref: return "\"DT_COMPLEX128_REF\""
      case .dtHalfRef: return "\"DT_HALF_REF\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .dtInvalid: return ".dtInvalid"
      case .dtFloat: return ".dtFloat"
      case .dtDouble: return ".dtDouble"
      case .dtInt32: return ".dtInt32"
      case .dtUint8: return ".dtUint8"
      case .dtInt16: return ".dtInt16"
      case .dtInt8: return ".dtInt8"
      case .dtString: return ".dtString"
      case .dtComplex64: return ".dtComplex64"
      case .dtInt64: return ".dtInt64"
      case .dtBool: return ".dtBool"
      case .dtQint8: return ".dtQint8"
      case .dtQuint8: return ".dtQuint8"
      case .dtQint32: return ".dtQint32"
      case .dtBfloat16: return ".dtBfloat16"
      case .dtQint16: return ".dtQint16"
      case .dtQuint16: return ".dtQuint16"
      case .dtUint16: return ".dtUint16"
      case .dtComplex128: return ".dtComplex128"
      case .dtHalf: return ".dtHalf"
      case .dtFloatRef: return ".dtFloatRef"
      case .dtDoubleRef: return ".dtDoubleRef"
      case .dtInt32Ref: return ".dtInt32Ref"
      case .dtUint8Ref: return ".dtUint8Ref"
      case .dtInt16Ref: return ".dtInt16Ref"
      case .dtInt8Ref: return ".dtInt8Ref"
      case .dtStringRef: return ".dtStringRef"
      case .dtComplex64Ref: return ".dtComplex64Ref"
      case .dtInt64Ref: return ".dtInt64Ref"
      case .dtBoolRef: return ".dtBoolRef"
      case .dtQint8Ref: return ".dtQint8Ref"
      case .dtQuint8Ref: return ".dtQuint8Ref"
      case .dtQint32Ref: return ".dtQint32Ref"
      case .dtBfloat16Ref: return ".dtBfloat16Ref"
      case .dtQint16Ref: return ".dtQint16Ref"
      case .dtQuint16Ref: return ".dtQuint16Ref"
      case .dtUint16Ref: return ".dtUint16Ref"
      case .dtComplex128Ref: return ".dtComplex128Ref"
      case .dtHalfRef: return ".dtHalfRef"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}
